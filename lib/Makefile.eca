# Normally this makefile shouldn't be called directly and we expect the output
# path to be on a certain location to fit together with the other OP-TEE
# gits and helper scripts.
ifeq ($O,)
$(error output path should be specified when calling this makefile)
endif

CC		= $(CROSS_COMPILE)gcc
CPP		= $(CROSS_COMPILE)cpp
CXX		= $(CROSS_COMPILE)g++
LD		= $(CROSS_COMPILE)ld
AR		= $(CROSS_COMPILE)ar
NM		= $(CROSS_COMPILE)nm
OBJCOPY		= $(CROSS_COMPILE)objcopy
OBJDUMP		= $(CROSS_COMPILE)objdump
READELF		= $(CROSS_COMPILE)readelf

MAJOR_VERSION	:= 1
MINOR_VERSION	:= 0
LIB_NAME	:= libsmaf.so
LIB_MAJOR	:= $(LIB_NAME).$(MAJOR_VERSION)
LIB_MAJ_MIN	:= $(LIB_NAME).$(MAJOR_VERSION).$(MINOR_VERSION)

SMAF_LIBRARY	:= $(OUT_DIR)/$(LIB_NAME)

srcs := libsmaf.c

#  libsmaf.h  libsmaf.pc.in  Makefile.am  smaf.h

objs = $(patsubst %.c,$(O)/%.o, $(srcs))

CFLAGS += -I./
CFLAGS += -fPIC -D_GNU_SOURCE
CFLAGS += -Werror

#CFLAGS += -I$(OPTEE_CLIENT_EXPORT)/include
#CFLAGS += -I$(TA_DEV_KIT_DIR)/host_include

#LDFLAGS += -Wl,-L$(OPTEE_CLIENT_EXPORT)/lib
#LDFLAGS += -Wl,-lteec
LDFLAGS += -lpthread

$(SMAF_LIBRARY): $(objs)
	@echo '  LINK    $(O)/$@'
	$(q)$(CC) -o $(O)/$@ $+  -shared -Wl,-soname,$(LIB_NAME) $(LDFLAGS)

$(O)/%.o: $(CURDIR)/%.c
	mkdir -p $(O)
	@echo '  CC      $<'
	$(q)$(CC) $(CFLAGS) -c $< -o $@


.PHONY: clean
clean:
	@echo '  CLEAN $(O)'
	$(q)rm -f $(O)/$(LIB_NAME)
	$(q)$(foreach obj,$(objs), rm -f $(obj))

